#quantum_stock_prediction.py with run_quantum_prediction() and predict_stock()
from qiskit.circuit.library import ZZFeatureMap
from qiskit_machine_learning.kernels import QuantumKernel
from qiskit.utils import algorithm_globals
from qiskit import BasicAer
#from qiskit.algorithms import QSVM
from qiskit_machine_learning.algorithms import QSVC
import numpy as np
from qiskit_ibm_runtime import QiskitRuntimeService, Sampler
from qiskit.circuit.library import RealAmplitudes
from fastapi import HTTPException


def run_quantum_prediction():
    
    print("🔄 Starting IBM Quantum prediction...")
    # Ensure the Qiskit Runtime Service is initialized with your IBM Quantum account token
    # Note: Replace the token with your actual IBM Quantum account token or use environment variables for security.
    try:
        # Initialize the Qiskit Runtime Service
        service = QiskitRuntimeService(
            channel="ibm_quantum",
            token="9ad7e3042518c0edaa46162da122d3dd747bc931bb6f8135cd127d747d716c66b5be5a4f469d705ef6ed0f268aec4e36ff2f3952c757586db99382765ef56c19"  # Replace or inject via environment variable for security
        )
        print("🔄 Started IBM Quantum prediction...")
        # Debug: List available backends
        backends = service.backends()
        print("Available backends:", [getattr(b, 'name', 'Unknown') for b in backends])

        # Use confirmed available backend
        backend = service.backend("ibm_brisbane")
        backend_name = backend.name if isinstance(getattr(backend, 'name'), str) else backend.name()
        print("🔄 Initialized backend:", backend_name)
        print("Backend type:", type(backend))
        print("Backend name attribute type:", type(getattr(backend, 'name')))

        # Define the quantum circuit ansatz
        ansatz = RealAmplitudes(num_qubits=2, reps=1)
        print("Ansatz created:", ansatz)
        print("Ansatz type:", type(ansatz))

        # Initialize Sampler with backend
        sampler = Sampler(backend=backend)
        print("Sampler type:", type(sampler))
        print("Sampler run attribute type:", type(getattr(sampler, 'run')))
        job = sampler.run(circuits=[ansatz])
        print("🔄 Job submitted:", job.job_id())
        result = job.result()
        print("🔄 Result retrieved")

        print("🔬 Raw result:", result)

        # Extract quasi-distributions
        if not hasattr(result, 'quasi_dists'):
            raise ValueError("Result does not contain quasi-distributions.")

        if not result.quasi_dists:
            raise ValueError("No quasi-distributions found in the result.")

        print("✅ Successfully retrieved quasi-distributions.")
        print("🔍 Quasi-distributions:", result.quasi_dists)

        quasi_dist = result.quasi_dists[0]
        return {"quasi_dist": quasi_dist}

    except Exception as e:
        print("❌ Exception in run_quantum_prediction():", str(e))
        raise HTTPException(status_code=500, detail=str(e))

def predict_stock():
    algorithm_globals.random_seed = 12345
    X_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y_train = np.array([0, 1, 1, 0])
    feature_map = ZZFeatureMap(feature_dimension=2, reps=1)
    quantum_kernel = QuantumKernel(feature_map=feature_map, quantum_instance=BasicAer.get_backend("qasm_simulator"))
    model = QSVC(quantum_kernel=quantum_kernel)
    model.fit(X_train, y_train)
    test_sample = np.array([[0.5, 0.5]])
    prediction = model.predict(test_sample)
    return {"input": test_sample.tolist(), "predicted_class": int(prediction[0])}